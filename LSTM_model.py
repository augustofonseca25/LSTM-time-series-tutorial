# -*- coding: utf-8 -*-
"""LSTM model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hZMCfB8PS-Bm0YcTkaItBeWsqceZyvkd
"""

# Importing libraries
import pandas as pd
import matplotlib.pyplot as plt

from keras.models import Sequential
from keras.layers import LSTM, Dense

# from google.colab import drive
# drive.mount('/content/drive')

# LSTM model

# Based on https://machinelearningmastery.com/multivariate-time-series-forecasting-lstms-keras/

# Change to your file path
#file_path = '/content/drive/My Drive/Data_Projects/MDS/3rd semester/Deep learning LAB/Assignments/LSTM-time-series-tutorial/data/reframed.csv'

file_path = 'data/reframed.csv'
reframed = pd.read_csv(file_path)

len(reframed)

# split into train and test sets
values = reframed.values
#n_train_hours = 365 * 24
n_train_days = int(0.7 * len(reframed))
train = values[:n_train_days, :]
test = values[n_train_days:, :]
# split into input and outputs
train_X, train_y = train[:, :-1], train[:, -1]
test_X, test_y = test[:, :-1], test[:, -1]
# reshape input to be 3D [samples, timesteps, features]
train_X = train_X.reshape((train_X.shape[0], 1, train_X.shape[1]))
test_X = test_X.reshape((test_X.shape[0], 1, test_X.shape[1]))
print(train_X.shape, train_y.shape, test_X.shape, test_y.shape)

# design network
model = Sequential()
model.add(LSTM(50, input_shape=(train_X.shape[1], train_X.shape[2])))
model.add(Dense(1))
model.compile(loss='mae', optimizer='adam')
# fit network
history = model.fit(train_X, train_y, epochs=50, batch_size=10, validation_data=(test_X, test_y), verbose=2, shuffle=False)
# plot history
plt.plot(history.history['loss'], label='train')
plt.plot(history.history['val_loss'], label='test')
plt.legend()
plt.show()